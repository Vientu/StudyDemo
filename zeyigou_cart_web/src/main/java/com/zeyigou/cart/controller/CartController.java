package com.zeyigou.cart.controller;import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.fastjson.JSON;import com.vientu.util.CookieUtil;import com.zeyigou.cart.service.AddressService;import com.zeyigou.cart.service.CartService;import com.zeyigou.group.Cart;import com.zeyigou.order.service.OrderService;import com.zeyigou.pojo.Result;import com.zeyigou.pojo.TbAddress;import com.zeyigou.pojo.TbOrder;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.List;/** * Created by WF on 2020/9/29 9:54 */@RestController@RequestMapping("cart")public class CartController {    @Reference    private CartService cartService;    @Reference    private AddressService addressService;    @Reference    private OrderService orderService;    @Autowired    private HttpServletRequest request;    @Autowired    private HttpServletResponse response;    //1.查看购物车，返回原来的购物车列表    @RequestMapping("findCartList")    public List<Cart> findCartList(){        //得到登录名        String name = SecurityContextHolder.getContext().getAuthentication().getName();        //1.1)从cookie中得到购物车列表        String cartListStr = CookieUtil.getCookieValue(request, "cartList", "UTF-8");        //1.2)判断此购物车的字符串是否存在        if(StringUtils.isBlank(cartListStr)){            cartListStr = "[]";        }        //1.3)将字符串转换为list集合        List<Cart> cookieCartList = JSON.parseArray(cartListStr, Cart.class);        //1.4）判断是否登录        if("anonymousUser".equals(name)){       //未登录返回cookieList            return cookieCartList;        }else{                                  //己登录，从redis中得到购物车，再看cookie是否存存购物数据，如果存在，就合并            List<Cart> redisCartList = cartService.getCartListFromRedis(name);            //判断cookie中是否有购物车数据,如果有就合并            if(cookieCartList.size() > 0){                //① 合并购物车                redisCartList = cartService.mergeCartList(cookieCartList,redisCartList);                //② 保存到redis中                cartService.saveCartListToRedis(redisCartList,name);                //③ 从cookie中删除购物车数据                CookieUtil.deleteCookie(request,response,"cartList");            }            //返回            return redisCartList;        }    }    //2.添加商品到购物车    @RequestMapping("addCartList")    //注意：下面的注解必须在spring4.2.4以后才可以    //@CrossOrigin(origins = "http://localhost:9104",allowCredentials = "true")    //跨域请求    @CrossOrigin    public Result addCartList(Long itemId, int num){        try {            // response.setHeader("Access-Control-Allow-Origin", "http://localhost:9104");            // response.setHeader("Access-Control-Allow-Credentials", "true");            //得到登录名            String name = SecurityContextHolder.getContext().getAuthentication().getName();            //2.1)查看得到购物车列表            List<Cart> cartList = findCartList();            //2.2)将当前传入的商品添加到购物车列表中            cartList = cartService.addCartList(cartList,itemId,num);            if("anonymousUser".equals(name)){   //未登录放到cookie中                //2.3)将购物车列表放到cookie中                CookieUtil.setCookie(request,response,"cartList",JSON.toJSONString(cartList),3600*24,"UTF-8");            }else{                              //己登录放到redis                cartService.saveCartListToRedis(cartList,name);            }            return new Result(true, "添加成功");        } catch (Exception e) {            e.printStackTrace();            return new Result(false, "添加失败");        }    }    //3.查看地址列表    @RequestMapping("findAddressList")    public List<TbAddress> findAddressList(){        //3.1)得到登录的用户id        String name = SecurityContextHolder.getContext().getAuthentication().getName();        //3.2)根据用户id查询其对应的地址列表        return addressService.findAddressList(name);    }    //4.保存订单    @RequestMapping("add")    public Result add(@RequestBody TbOrder order){        try {            //4.1)设置数据来源            order.setSourceType("2");            //4.2)设置登录的用户id            order.setUserId(SecurityContextHolder.getContext().getAuthentication().getName());            //4.3)添加订单            orderService.add(order);            //4.4)返回            return new Result(true,"保存订单成功！");        } catch (Exception e) {            e.printStackTrace();            return new Result(false,"保存订单失败！");        }    }}